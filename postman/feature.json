	{
		"info": {
			"_postman_id": "4d078efb-64b1-46ec-a363-ec876fa1d8b1",
			"name": "Test Explore With Me - Comments",
			"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
			"_exporter_id": "26331321"
		},
		"item": [
			{
				"name": "add comment, user not found",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статус 404 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(404);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n    \"message\": \"User id300 not found \"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/comments/:userId/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							"comments",
							":userId",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "300"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, event not found",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(404);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n    \"message\": \"Event id300 not found\"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/comments/:userId/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							"comments",
							":userId",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "300"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, message is null",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(400);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, message is blank",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(400);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n    \"message\": \"\"  \r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, message > 500",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(400);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n    \"message\": \"Я очень творческий человек. Люблю тяжелую музыку и стараюсь как можно чаще ездить на фестивали и концерты. Как - то так получилось, что росла я на русском роке. В основном это была Ария, Король и Шут, Калинов Мост, Наив. Конечно, со временем количество групп, которые я слушала, менялось, но жанр, в котором они играют, остался неизменным. Первое мероприятия, на которое я попала - это был концерт братьев Самойловых, а потом уже последовали другие, менее крупные. Сейчас я часто слушаю мюзиклы, рок- оперы...А ещё у мня есть своя кавер - команда, но, к большому сожалению, из - за моей неорганизованности, мы мало на что можем рассчитывать. Это, конечно, печально, ведь хотелось стать известными в фандаберских кругах. \"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 1 event 1",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Jared Leto will take part and play 5 songs at Rock the Bells\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 1 event 2",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Jared Leto will take part and play 5 songs at Wacken Open Air\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "2"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "updating comment,  non-existent user",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(409);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PATCH",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n  \"message\": \"Taylor Momson will take part and play 5 songs at Rock the Bells\"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							},
							{
								"key": "commentId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "updating comment, comment not found",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статус 404 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(404);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PATCH",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n  \"message\": \"Jared Leto will take part and play 5 songs at Rock the Bells\"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "commentId",
								"value": "30"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "updating comment, successfully update",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});\r",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PATCH",
					"header": [],
					"body": {
						"mode": "raw",
						"raw": "{\r\n  \"message\": \"Jared Leto will take part and play 5 songs at Rock the Bells\"\r\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "commentId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "deleting comment, non existent user",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(409);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "DELETE",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							},
							{
								"key": "commentId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "deleting comment, private user",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
								"    pm.response.to.have.status(204);\r",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "DELETE",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "commentId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "deleting comment, admin",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
								"    pm.response.to.have.status(204);\r",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "DELETE",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/admin/comments/:commentId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments",
							":commentId"
						],
						"variable": [
							{
								"key": "commentId",
								"value": "2"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by admin, empty list",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});\r",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/admin/comments",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments"
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 1 event 3",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Jared Leto will take part and play 8 songs at Rock Am Ring\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "1"
							},
							{
								"key": "eventId",
								"value": "3"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 2 event 1",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Taylor Momson will take part and play 5 songs at Wacken Open Air\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							},
							{
								"key": "eventId",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 2 event 2",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Taylor Momson will take part and play 5 songs at Rock the Bells\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							},
							{
								"key": "eventId",
								"value": "2"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 2 event 3",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Taylor Momson will take part and play 5 songs at Wacken Open Air\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							},
							{
								"key": "eventId",
								"value": "3"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "add comment, user 3 event 3",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
								"    pm.response.to.have.status(201);",
								"    pm.response.to.be.withBody;",
								"    pm.response.to.be.json;",
								"});",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"message\": \"Till Lindemann will take part and play 7 songs at Wacken Open Air\"\n}"
					},
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "userId",
								"value": "3"
							},
							{
								"key": "eventId",
								"value": "3"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by admin",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});\r",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/admin/comments",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments"
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by admin, from=0, size 1",
				"event": [
					{
						"listen": "prerequest",
						"script": {
							"exec": [
								"const main = async () => {\r",
								"    const api = new API(pm);\r",
								"    const rnd = new RandomUtils();\r",
								"\r",
								"    try {\r",
								"        const user = await api.addUser(rnd.getUser());\r",
								"        pm.collectionVariables.set('uid', user.id);\r",
								"        pm.collectionVariables.set('commentatorName', user.name);\r",
								"\r",
								"        const category = await api.addCategory(rnd.getCategory());\r",
								"        let eventBody = rnd.getEvent(category.id);\r",
								"        eventBody['requestModeration'] = true\r",
								"        let event = await api.addEvent(user.id, eventBody);\r",
								"        event = await api.publishEvent(event.id);\r",
								"\r",
								"        comment = await api.addComment(user.id, event.id, rnd.getComment())\r",
								"\r",
								"        let eventBody2 = rnd.getEvent(category.id);\r",
								"        eventBody2['requestModeration'] = true\r",
								"        let event2 = await api.addEvent(user.id, eventBody2);\r",
								"        event2 = await api.publishEvent(event2.id);\r",
								"        pm.collectionVariables.set('eventId2', event2.id);\r",
								"\r",
								"        comment2 = await api.addComment(user.id, event2.id, rnd.getComment())\r",
								"        pm.collectionVariables.set('commentId2', comment2.id);\r",
								"        pm.collectionVariables.set('text2', comment2.text);\r",
								"\r",
								"    } catch(err) {\r",
								"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
								"    }\r",
								"};\r",
								"\r",
								"const interval = setInterval(() => {}, 1000);\r",
								"\r",
								"setTimeout(async () => \r",
								"    {\r",
								"        try {\r",
								"            // выполняем наш скрипт\r",
								"            await main();\r",
								"        } catch (e) {\r",
								"            console.error(e);\r",
								"        } finally {\r",
								"            clearInterval(interval);\r",
								"        }\r",
								"    },  \r",
								"    100 \r",
								");"
							],
							"type": "text/javascript"
						}
					},
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"protocolProfileBehavior": {
					"disableBodyPruning": true
				},
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": ""
					},
					"url": {
						"raw": "{{baseUrl}}/admin/comments?from=0&size=1",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments"
						],
						"query": [
							{
								"key": "from",
								"value": "0"
							},
							{
								"key": "size",
								"value": "1"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by admin, time interval in future",
				"event": [
					{
						"listen": "prerequest",
						"script": {
							"exec": [
								"const main = async () => {\r",
								"    const api = new API(pm);\r",
								"    const rnd = new RandomUtils();\r",
								"\r",
								"    try {\r",
								"        const user = await api.addUser(rnd.getUser());\r",
								"        pm.collectionVariables.set('uid', user.id);\r",
								"        pm.collectionVariables.set('commentatorName', user.name);\r",
								"\r",
								"        const category = await api.addCategory(rnd.getCategory());\r",
								"        let eventBody = rnd.getEvent(category.id);\r",
								"        eventBody['requestModeration'] = true\r",
								"        let event = await api.addEvent(user.id, eventBody);\r",
								"        event = await api.publishEvent(event.id);\r",
								"\r",
								"        comment = await api.addComment(user.id, event.id, rnd.getComment())\r",
								"\r",
								"        let eventBody2 = rnd.getEvent(category.id);\r",
								"        eventBody2['requestModeration'] = true\r",
								"        let event2 = await api.addEvent(user.id, eventBody2);\r",
								"        event2 = await api.publishEvent(event2.id);\r",
								"        pm.collectionVariables.set('eventId2', event2.id);\r",
								"\r",
								"        comment2 = await api.addComment(user.id, event2.id, rnd.getComment())\r",
								"        pm.collectionVariables.set('commentId2', comment2.id);\r",
								"        pm.collectionVariables.set('text2', comment2.text);\r",
								"\r",
								"    } catch(err) {\r",
								"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
								"    }\r",
								"};\r",
								"\r",
								"const interval = setInterval(() => {}, 1000);\r",
								"\r",
								"setTimeout(async () => \r",
								"    {\r",
								"        try {\r",
								"            // выполняем наш скрипт\r",
								"            await main();\r",
								"        } catch (e) {\r",
								"            console.error(e);\r",
								"        } finally {\r",
								"            clearInterval(interval);\r",
								"        }\r",
								"    },  \r",
								"    100 \r",
								");"
							],
							"type": "text/javascript"
						}
					},
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(400);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"protocolProfileBehavior": {
					"disableBodyPruning": true
				},
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": ""
					},
					"url": {
						"raw": "{{baseUrl}}/admin/comments?rangeStart=2025-01-06%2013%3A30%3A38&&rangeEnd=2097-09-06%2013%3A30%3A38",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments"
						],
						"query": [
							{
								"key": "rangeStart",
								"value": "2025-01-06%2013%3A30%3A38"
							},
							{
								"key": null,
								"value": null
							},
							{
								"key": "rangeEnd",
								"value": "2097-09-06%2013%3A30%3A38"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by admin, rangeEnd after rangeStart",
				"event": [
					{
						"listen": "prerequest",
						"script": {
							"exec": [
								"const main = async () => {\r",
								"    const api = new API(pm);\r",
								"    const rnd = new RandomUtils();\r",
								"\r",
								"    try {\r",
								"        const user = await api.addUser(rnd.getUser());\r",
								"        pm.collectionVariables.set('uid', user.id);\r",
								"        pm.collectionVariables.set('commentatorName', user.name);\r",
								"\r",
								"        const category = await api.addCategory(rnd.getCategory());\r",
								"        let eventBody = rnd.getEvent(category.id);\r",
								"        eventBody['requestModeration'] = true\r",
								"        let event = await api.addEvent(user.id, eventBody);\r",
								"        event = await api.publishEvent(event.id);\r",
								"\r",
								"        comment = await api.addComment(user.id, event.id, rnd.getComment())\r",
								"\r",
								"        let eventBody2 = rnd.getEvent(category.id);\r",
								"        eventBody2['requestModeration'] = true\r",
								"        let event2 = await api.addEvent(user.id, eventBody2);\r",
								"        event2 = await api.publishEvent(event2.id);\r",
								"        pm.collectionVariables.set('eventId2', event2.id);\r",
								"\r",
								"        comment2 = await api.addComment(user.id, event2.id, rnd.getComment())\r",
								"        pm.collectionVariables.set('commentId2', comment2.id);\r",
								"        pm.collectionVariables.set('text2', comment2.text);\r",
								"\r",
								"    } catch(err) {\r",
								"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
								"    }\r",
								"};\r",
								"\r",
								"const interval = setInterval(() => {}, 1000);\r",
								"\r",
								"setTimeout(async () => \r",
								"    {\r",
								"        try {\r",
								"            // выполняем наш скрипт\r",
								"            await main();\r",
								"        } catch (e) {\r",
								"            console.error(e);\r",
								"        } finally {\r",
								"            clearInterval(interval);\r",
								"        }\r",
								"    },  \r",
								"    100 \r",
								");"
							],
							"type": "text/javascript"
						}
					},
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(400);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"protocolProfileBehavior": {
					"disableBodyPruning": true
				},
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": ""
					},
					"url": {
						"raw": "{{baseUrl}}/admin/comments?rangeStart=2025-01-06%2013%3A30%3A38&&rangeEnd=2097-09-06%2013%3A30%3A38",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"admin",
							"comments"
						],
						"query": [
							{
								"key": "rangeStart",
								"value": "2025-01-06%2013%3A30%3A38"
							},
							{
								"key": null,
								"value": null
							},
							{
								"key": "rangeEnd",
								"value": "2097-09-06%2013%3A30%3A38"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by user not found",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(404);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments"
						],
						"variable": [
							{
								"key": "userId",
								"value": "300"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by user id 2",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});\r",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/users/:userId/comments",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"users",
							":userId",
							"comments"
						],
						"variable": [
							{
								"key": "userId",
								"value": "2"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by event not found",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
								"    pm.response.to.have.status(404);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"}); "
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "eventId",
								"value": "300"
							}
						]
					}
				},
				"response": []
			},
			{
				"name": "get all comments by event id 3",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
								"    pm.response.to.have.status(200);\r",
								"    pm.response.to.be.withBody;\r",
								"    pm.response.to.be.json;\r",
								"});\r",
								""
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{baseUrl}}/comments/:eventId",
						"host": [
							"{{baseUrl}}"
						],
						"path": [
							"comments",
							":eventId"
						],
						"variable": [
							{
								"key": "eventId",
								"value": "3"
							}
						]
					}
				},
				"response": []
			}
		],
		"event": [
			{
				"listen": "prerequest",
				"script": {
					"type": "text/javascript",
					"exec": [
						""
					]
				}
			},
			{
				"listen": "test",
				"script": {
					"type": "text/javascript",
					"exec": [
						""
					]
				}
			}
		],
		"variable": [
			{
				"key": "baseUrl",
				"value": "http://localhost:8080"
			}
		]
	}